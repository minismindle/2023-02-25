#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include <map>
#include <set>
#include <algorithm>

using namespace std;
class Knight
{
public:
    Knight() { cout << "기본생성자" << endl; }
    Knight(const Knight&) { cout << "복사생성자" << endl; }
    Knight(Knight&&) noexcept { cout << "이동생성자" << endl; }
};
void Test_RValueRef(Knight&& k) // 오른값 참조
{

}

void Test_Copy(Knight k)
{

}

template<typename T>
void Test_ForwardingRef(T&& param) // 전달 참조
{
    // 왼값 참조라면 복사
    // 오른값 참조라면 복사
    Test_Copy(forward<T>(param));
}
// 전달 참조
// &&  &를 두번 -> 오른값 참조
int main()
{
    Knight k1;
    //Test_RValueRef(move(k1)); // rvalue_cast

    //Test_ForwardingRef(k1);
    //Test_ForwardingRef(move(k1));

    auto&& k2 = k1;
    auto&& k3 = move(k1);
    // 공통점 : 형식 연역(auto,template)이 일어날 때 

    // 전달 참조를 구별하는 방법
    // ----------------------------------------------

    Knight& k4 = k1; // 왼값 참조
    Knight&& k5 = move(k1); // 오른값 참조

    // 오른값 : 왼값이 아니다 = 단일식에서 벗어나면 사용 X
    // 오른값 참조 : 오른값만 참조할 수 있는 참조 타입
    //Test_RValueRef(move(k5));
    Test_ForwardingRef((k1));
    Test_ForwardingRef(move(k1));
    return 0;
}

